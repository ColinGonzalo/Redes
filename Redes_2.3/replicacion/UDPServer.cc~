#include "UDPServer.h"
#include "Serializable.h"

UDPServer::UDPServer(const char * serv, const char * port)
    :socket(serv, port)
{
    pthread_mutex_init(&mutex, 0);
};

UDPServer::~UDPServer()
{
    pthread_mutex_destroy(&mutex);
};

// ----------------------------------------------------------------------------

extern "C" void * _server_thread(void *arg)
{
    UDPServer * server = static_cast<UDPServer *>(arg);

    server->server_thread();

    return 0;
}

// ----------------------------------------------------------------------------
/**
     * Crea un pool de threads, cada uno tratará un mensaje
     *    @return 0 en caso de éxito o -1 si error
     */
int UDPServer::start()
{
 //THREAD_POOL_SIZE = 5
 pthread_t pool_t[THREAD_POOL_SIZE];
  int i;
  for(i = 0; i < THREAD_POOL_SIZE; i++){
    	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setdetachstate(&attr,PTHREAD_CREATE_DETACHED);
        pthread_create(&pool_t[i], &attr,  _server_thread, static_cast<void*>(this));
  }

   return 0;

}

// ----------------------------------------------------------------------------
 /**
     *  Lógica principal del thread servidor
     *    1. Permanece en un bucle
     *    2. Recibe el mensaje en un buffer Socket::recv, y que crea un nuevo
     *    Socket para la conexion cliente.
     *    3. Añade el cliente a la lista de clientes.
     *    4. Llama a UDPServer::do_message para tratar el mensaje
     */
void UDPServer::server_thread()
{
	while(true){
         char buffer[512];

         Socket* sock;
         socket.recv(buffer, &sock);
         
         connections.push_back(sock);

         do_message(&buffer);
         //do_message(buffer);
        
        }
}

// ----------------------------------------------------------------------------
/**
     * Añade el socket a la lista de conexiones si no está incluida, en caso
     * contrario elimina el objeto. Esta función debe bloquear el mutex.
     */
void UDPServer::add_connection (Socket * s)
{
 pthread_mutex_lock(&mutex);
 int i = 0;
 bool in = false;
 for(i = 0; i < connections.size(); i++){
    if(connections[i] == s){
       delete s;
       in = true;
    }
 }
 if(!in && connections.size() < THREAD_POOL_SIZE){
  connections.push_back(s);
 }
 
 pthread_mutex_unlock(&mutex);
}

// ----------------------------------------------------------------------------
/**
     *  Borrar la conexión. Esta función debe bloquear el mutex.
     */
void UDPServer::del_connection (Socket * s)
{
   pthread_mutex_lock(&mutex);

   int i = 0;
   int pos;
   while(i < connections.size() && connections[i] != s){
    i++;
    pos = i + connections.begin();
   }

   if(i < connections.size()){
	connections.erase(pos);
   }

   pthread_mutex_unlock(&mutex);
}

// ----------------------------------------------------------------------------
// ----------------------------------------------------------------------------

